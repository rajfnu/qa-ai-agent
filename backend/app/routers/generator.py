from fastapi import APIRouter, HTTPException
from app.models import GeneratorRequest, AgentResponse
import time
import random

router = APIRouter()

@router.post("/generator", response_model=AgentResponse)
async def generator_agent(request: GeneratorRequest):
    """
    Generator Agent (TestGeneratorAgent / Code Agent)

    This agent generates executable Test Scripts in Playwright (or other frameworks) from the Test Plan.

    Based on the architecture diagram:
    - Reads Test Plan created by Planner
    - Uses Tools for Playwright
    - Communicates with LLM (code generation model)
    - Generates Test Scripts (code files)
    """

    try:
        # Simulate processing time (code generation takes time)
        time.sleep(random.uniform(2.0, 3.0))

        # Dummy AI logic - In real implementation, this would:
        # 1. Parse the test plan structure
        # 2. Use Code LLM to generate framework-specific code
        # 3. Create executable scripts with proper selectors and assertions

        framework = request.automationFramework.lower()
        test_plan = request.testPlan
        num_test_cases = test_plan.get("totalTestCases", 5)

        # Generate dummy test script based on framework
        if framework == "playwright":
            test_script = f"""// Generated Test Script using Playwright
// Application: {test_plan.get('appName', 'Unknown')}
// Generated by: {request.generationModel}
// Total Test Cases: {num_test_cases}

const {{ test, expect }} = require('@playwright/test');

test.describe('{test_plan.get('appName', 'Application')} - Automated Tests', () => {{
"""
            for i, tc in enumerate(test_plan.get('testCases', [])[:5], 1):  # First 5 test cases
                test_script += f"""
  test('{tc['name']}', async ({{ page }}) => {{
    // Navigate to application
    await page.goto('{test_plan.get('testUrl', 'https://example.com')}');

    // Test steps
    await page.waitForLoadState('networkidle');
    // TODO: Add specific test logic for {tc['type']}

    // Assertions
    await expect(page).toHaveTitle(/{test_plan.get('appName', 'App')}/i);
  }});
"""
            test_script += "});\n"

        elif framework == "selenium":
            test_script = f"""# Generated Test Script using Selenium
# Application: {test_plan.get('appName', 'Unknown')}
# Generated by: {request.generationModel}

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
import unittest

class {test_plan.get('appName', 'App').replace(' ', '')}Tests(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Chrome()
        self.driver.get('{test_plan.get('testUrl', 'https://example.com')}')

    def tearDown(self):
        self.driver.quit()
"""
            for i, tc in enumerate(test_plan.get('testCases', [])[:5], 1):
                test_script += f"""
    def test_{i}_{tc['name'].lower().replace(' ', '_')}(self):
        # Test: {tc['name']}
        # Type: {tc['type']}
        # Priority: {tc['priority']}
        pass  # TODO: Implement test logic
"""

        else:  # Cypress
            test_script = f"""// Generated Test Script using Cypress
// Application: {test_plan.get('appName', 'Unknown')}
// Generated by: {request.generationModel}

describe('{test_plan.get('appName', 'Application')} - Automated Tests', () => {{
  beforeEach(() => {{
    cy.visit('{test_plan.get('testUrl', 'https://example.com')}');
  }});
"""
            for i, tc in enumerate(test_plan.get('testCases', [])[:5], 1):
                test_script += f"""
  it('{tc['name']}', () => {{
    // Test Type: {tc['type']}
    // Priority: {tc['priority']}
    cy.url().should('include', '{test_plan.get('testUrl', 'https://example.com')}');
    // TODO: Add specific test assertions
  }});
"""
            test_script += "});\n"

        return AgentResponse(
            status="success",
            message=f"Executable script written in {request.automationFramework}. {num_test_cases} test cases generated. Lines of code: {len(test_script)}.",
            data={
                "testScript": test_script,
                "framework": request.automationFramework,
                "linesOfCode": len(test_script.split('\n')),
                "testCasesGenerated": min(num_test_cases, 5),
                "fileName": f"test_{test_plan.get('appName', 'app').lower().replace(' ', '_')}.{
                    'spec.js' if framework in ['playwright', 'cypress'] else 'py'
                }"
            }
        )

    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=AgentResponse(
                status="error",
                message="Generator Agent encountered an error",
                error_details=str(e)
            ).dict()
        )
